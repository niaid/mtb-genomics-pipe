
# calling SNPs with pilon
rule pilon:
    input:
        bam=get_sample_bams,
        bai=get_sample_bai,
        ref=f"data/reference/{accession}.fasta"
    output:
        vcf="output/pilon/individual/{sample}.vcf"
    params:
        vcf_out="output/pilon/individual/{sample}"
    log:
        "log/pilon/{sample}.log"
    threads: 8
    conda:
        "../envs/variants.yaml"
    shell:"""
        pilon -Xmx16G --genome {input.ref} \
            --frags {input.bam} \
            --output {params.vcf_out} --vcf 2> {log}
        """

rule compress_vcf:
    """
    compress VCF, appropriate sample name will be added to VCF sample field 
    """
    input:  
        "output/pilon/individual/{sample}.vcf"
    output: 
        "output/pilon/individual/{sample}.vcf.gz"
    params: 
        sample_name="{sample}"
    conda:
        "../envs/variants.yaml"
    shell:  """
        sed -E -i "s/SAMPLE/{params.sample_name}/g" {input}
        bgzip {input}
    """

rule filter_vcf:
    """
    decompose MNPs generated by pilon, filter VCF, adjust filter settings in config file
    """
    input:
        "output/pilon/individual/{sample}.vcf.gz"
    output: 
        "output/pilon/individual/{sample}.filt.vcf.gz"
    params: 
        filter_str=get_filter_info
    conda:
        "../envs/variants.yaml"
    shell: """
        vcftools --gzvcf {input} {params.filter_str} | bgzip -c > {output}
     """

rule index_vcf:
    input: 
        "output/pilon/individual/{sample}.filt.vcf.gz"
    output: 
        "output/pilon/individual/{sample}.filt.vcf.gz.tbi"
    conda:
        "../envs/variants.yaml"
    shell:"""
        tabix -p vcf {input}
    """

rule merge_vcfs:
    input:
        vcfs=get_all_vcfs,
        tbi=get_all_vcfs_tbi
    output:
        vcf=f"output/pilon/merged/{merged_sample_name}.filt.vcf.gz"
    params:
        vcfs_each=get_all_vcfs
    log:
        f"log/bcftools/{merged_sample_name}_merge.log"
    threads: 8
    conda:
        "../envs/variants.yaml"
    shell:"""
        bcftools merge --threads {threads} -F x {params.vcfs_each} -o {output.vcf} -O z 2> {log}
    """

rule extract_variants:
    input:
        f"output/pilon/merged/{merged_sample_name}.filt.vcf.gz"
    output:
        f"results/{merged_sample_name}/{merged_sample_name}.filt.vars.vcf.gz"
    conda:
        "../envs/variants.yaml"
    shell:"""
        bcftools view -v snps,indels,mnps {input} -o {output} -O z
    """

